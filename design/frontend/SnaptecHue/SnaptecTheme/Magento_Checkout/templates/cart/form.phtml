<?php

/**
 * Copyright © Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

// phpcs:disable Magento2.Templates.ThisInTemplate

/**  @var $block \Magento\Checkout\Block\Cart\Grid */
?>
<?php $mergedCells = ($this->helper(Magento\Tax\Helper\Data::class)->displayCartBothPrices() ? 2 : 1); ?>
<?= $block->getChildHtml('form_before') ?>
<form action="<?= $block->escapeUrl($block->getUrl('checkout/cart/updatePost')) ?>" method="post" id="form-validate" data-mage-init='{"Magento_Checkout/js/action/update-shopping-cart":
              {"validationURL" : "<?= $block->escapeUrl($block->getUrl('checkout/cart/updateItemQty')) ?>",
              "updateCartActionContainer": "#update_cart_action_container"}
          }' class="form form-cart">
    <?= $block->getBlockHtml('formkey') ?>
    <div class="cart table-wrapper<?= $mergedCells == 2 ? ' detailed' : '' ?>">
        <?php if ($block->getPagerHtml()) : ?>
            <div class="cart-products-toolbar cart-products-toolbar-top toolbar" data-attribute="cart-products-toolbar-top"><?= $block->getPagerHtml() ?>
            </div>
        <?php endif ?>
        <table id="shopping-cart-table" class="cart items data table" data-mage-init='{"shoppingCart":{"emptyCartButton": ".action.clear",
               "updateCartActionContainer": "#update_cart_action_container"}}'>
            <caption class="table-caption"><?= $block->escapeHtml(__('Shopping Cart Items')) ?></caption>
            <thead>
                <tr>
                    <th class="col item" scope="col"><span><?= $block->escapeHtml(__('Item')) ?></span></th>
                    <th class="col brand" scope="col"><span><?= /* @escapeNotVerified */ __('Brand') ?></span></th>
                    <th class="col price" scope="col"><span><?= $block->escapeHtml(__('Price')) ?></span></th>
                    <th class="col qty" scope="col"><span><?= $block->escapeHtml(__('Qty')) ?></span></th>
                    <th class="col subtotal" scope="col"><span><?= $block->escapeHtml(__('Subtotal')) ?></span></th>
                </tr>
            </thead>
            <?php foreach ($block->getItems() as $_item) : ?>
                <?= $block->getItemHtml($_item) ?>
            <?php endforeach ?>
        </table>
        <?php if ($block->getPagerHtml()) : ?>
            <div class="cart-products-toolbar cart-products-toolbar-bottom toolbar" data-attribute="cart-products-toolbar-bottom"><?= $block->getPagerHtml() ?>
            </div>
        <?php endif ?>
    </div>
    <div class="cart main actions">
        <?php if ($block->getContinueShoppingUrl()) : ?>
            <a class="action continue" href="<?= $block->escapeUrl($block->getContinueShoppingUrl()) ?>" title="<?= $block->escapeHtml(__('Continue Shopping')) ?>">
                <span><?= $block->escapeHtml(__('Continue Shopping')) ?></span>
            </a>
        <?php endif; ?>
        <?php if ($block->getViewModel()->isClearShoppingCartEnabled()) : ?>
            <button type="button" name="update_cart_action" data-cart-empty="" value="empty_cart" title="<?= $block->escapeHtml(__('Clear Shopping Cart')) ?>" class="action clear" id="empty_cart_button">
                <span><?= $block->escapeHtml(__('Clear Shopping Cart')) ?></span>
            </button>
        <?php endif ?>
        <button type="submit" id="update_cart_button" name="update_cart_action" data-cart-item-update="" value="update_qty" title="<?= $block->escapeHtml(__('Update Shopping Cart')) ?>" class="action update">
            <span><?= $block->escapeHtml(__('Update Shopping Cart')) ?></span>
        </button>
        <input type="hidden" value="" id="update_cart_action_container" data-cart-item-update="" />
    </div>
</form>
<?= $block->getChildHtml('checkout.cart.order.actions') ?>
<?= $block->getChildHtml('shopping.cart.table.after') ?>
<script>
    function updateQtyButtons() {
        require(['jquery'], function($) {
            $(".decreaseQty").click(function(event) {
                var qtyEl = $(this).siblings('.input-text');
                console.log($(this));
                var qty = parseInt(qtyEl.val());
                if (qty > 1) {
                    qtyEl.val(qty - 1);
                    qtyEl.trigger("change");
                }
            });

            $(".increaseQty").click(function(event) {
                var qtyEl = $(this).siblings('.input-text');
                console.log($(this));
                var qty = parseInt(qtyEl.val());
                qtyEl.val(qty + 1);
                qtyEl.trigger("change");
            });
        });
    }
    updateQtyButtons();
</script>
<script>
    require([
        'jquery',
        'Magento_Checkout/js/action/get-totals',
        'Magento_Customer/js/customer-data',
        'Magento_Checkout/js/model/quote',
        'Magento_Checkout/js/model/shipping-rate-processor/new-address',
        'Magento_Checkout/js/model/shipping-rate-processor/customer-address',
        'Magento_Checkout/js/model/shipping-rate-registry',
        'Magento_Checkout/js/action/select-shipping-method',
    ], function($, getTotalsAction, customerData, quote, defaultProcessor, customerAddressProcessor, rateRegistry, selectShippingMethodAction) {
        $(document).on('change', ".js-shopping-cart-input", function(event) {
            event.preventDefault();
            // var currentQty = $(this).val();
            // $(this).val(currentQty);
            var form = $(this).closest('form');
            $.ajax({
                type: form.attr('method'),
                url: form.attr('action'),
                data: form.serialize(),
                showLoader: true,
                success: function(res) {
                    var parsedResponse = $.parseHTML(res);
                    var result = $(parsedResponse).find("#form-validate");
                    var sections = ['cart'];
                    $("#form-validate").replaceWith(result);

                    // The mini cart reloading
                    // customerData.reload(sections, true);

                    // Update the shipping information in the summary
                    var processors = [];
                    rateRegistry.set(quote.shippingAddress().getCacheKey(), null);
                    processors.default = defaultProcessor;
                    processors['customer-address'] = customerAddressProcessor;

                    var type = quote.shippingAddress().getType();
                    if (processors[type]) {
                        processors[type].getRates(quote.shippingAddress());
                    } else {
                        processors.default.getRates(quote.shippingAddress());
                    }

                    // The totals summary block reloading

                    var deferred = $.Deferred();
                    $.when(
                        //get infomation :  thông tin giá trị đơn hàng, phí vận chuyển, thuế và tổng giá trị của đơn hàng
                        getTotalsAction([], deferred)
                    ).done(updateShippingMethod);
                    // Cập nhật phương thức vận chuyển

                    //js button +/-
                    updateQtyButtons();

                },
                error: function(xhr, status, error) {
                    var err = eval("(" + xhr.responseText + ")");
                    console.log(err.Message);
                }
            });
        });
        function updateShippingMethod() {
            // get all shipping method 
            const availableShippingMethodsA = rateRegistry.get(quote.shippingAddress().getCacheKey());
            //lấy ra freeshipping
            const freeshippingMethod = availableShippingMethodsA.find(method => method['method_code'] === 'freeshipping');
            //check xem xác định có freeshipping không
            const checkFirstFreeshipping = localStorage.getItem('freeShippingSelected');
            //set freeshipping for shipping method when lần đầu xuất hiện
            if (freeshippingMethod && checkFirstFreeshipping === 'false') {
                selectShippingMethodAction(freeshippingMethod);
                localStorage.setItem('freeShippingSelected', true);
            } else if (freeshippingMethod && checkFirstFreeshipping === 'true') {
                // selectShippingMethodAction(null);
            } else {
                //chưa đủ điều kiện kích hoạt freeshipping
                localStorage.setItem('freeShippingSelected', false);
            }
        }
    });
</script>